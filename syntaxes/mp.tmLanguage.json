{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.mp",
	"name": "MP",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"comment": "TODO: handle mpendblock , probz want different highlighting, parameter name?"
		},
		{
			"comment": "TODO: handle mpinclude, highlight that filename better"
		},
		{
			"include": "#variable-enclosed"
		},
		{
			"include": "#mp"
		},
		{
			"comment": "catch UWE code"
		},
		{
			"include": "text.html.basic"
		}
	],
	"repository": {
		"comment": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.mp"
				}
			]
		},
		"mp": {
			"patterns": [
				{"include": "#mp-blocks"},
				{"include": "#mp-statement"},
				{
					"comment": "[${a} == 1|<p>something</p>|<li>something else</li>]",
					"include": "#mp-conditional-block"
				},
				{
					"comment": "~mpSQL(...)~ ",
					"include": "#mp-template-output"
				}
			]
		},
		"mp-blocks": {
			"patterns": [
				{"include": "#mp-block-block"},
				{"include": "#mp-var-block"},
				{"include": "#mp-if-block"},
				{"include": "#mp-else-block"},
				{"include": "#mp-loop-block"}
			]
		},
		"mp-var-block": {
			"begin": "(<!--\\s*MPVAR\\s*:[^=]*-->)",
			"beginCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"end": "(<!--\\s*MPENDVAR\\s*-->)",
			"endCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"patterns": [
				{"include": "#variable-enclosed"},
				{"include": "#sql-string-perl-qq"},
				{"include": "#string"},
				{
					"match": "\\.",
					"name": "keyword.operator.concat"
				}
			]
		},
		"mp-block-block": {
			"begin": "(<!--\\s*MPBLOCK\\s*:.*-->)",
			"beginCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"end": "(<!--\\s*MPENDBLOCK\\s*:.*-->)",
			"endCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"patterns": [
				{"include": "$self"}
			]
		},
		"mp-loop-block": {
			"begin": "(<!--\\s*MPLOOP\\s*:.*-->)",
			"beginCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"end": "(<!--\\s*MPENDLOOP\\s*-->)",
			"endCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"patterns": [
				{"include": "$self"}
			]
		},
		"mp-if-block": {
			"begin": "(<!--\\s*(MPIF|MPELSEIF)\\s*:.*-->)",
			"beginCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"end": "(<!--\\s*(MPENDIF\\s*|MPELSEIF\\s*:.*|MPELSE\\s*)-->)",
			"endCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"patterns": [
				{"include": "$self"}
			]
		},
		"mp-else-block": {
			"begin": "(<!--\\s*MPELSE\\s*-->)",
			"beginCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"end": "(<!--\\s*MPENDIF\\s*-->)",
			"endCaptures": {
				"0": {
					"patterns": [
						{"include": "#mp-statement"}
					]
				}
			},
			"patterns": [
				{"include": "$self"}
			]
		},
		"mp-statement": {
			"begin": "(<!--)",
			"beginCaptures": {
				"0": {
					"name": "comment.block.html"
				}
			},
			"end": "(-->)",
			"endCaptures": {
				"0": {
					"name": "comment.block.html"
				}
			},
			"patterns": [
				{
					"include": "#mod-perl"
				}
			]
		},
		"mod-perl": {
			"patterns": [
				{
					"include": "#regex"
				},
				{
					"include": "#string"
				},
				{
					"include": "#mp-control"
				},
				{
					"include": "#function"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#variable"
				},
				{
					"name": "punctuation.accessor.mp",
					"match": "->"
				},
				{
					"comment": "#keyword-acccess, #keyword-operators"
				}
			]
		},
		"function": {
			"patterns": [
				{
					"match": "(\\w+)\\(",
					"captures": {
						"1": {
							"name": "entity.name.function.mp"
						}
					}
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"match": "(\\-?\\d+\\.?\\d*)",
					"captures": {
						"1": {
							"name": "constant.numeric.mp"
						}
					}
				}
			]
		},
		"variable": {
			"patterns": [
				{"include": "#variable-enclosed"},
				{"include": "#variable-perl"},
				{"include": "#variable-bareword"}
			]
		},
		"variable-enclosed": {
			"patterns": [{
				"match": "(\\$\\{)(\\w+)(\\})",
				"captures": {
					"1": {
						"name": "punctuation.definition.variable.mp"
					},
					"2": {
						"name": "storage.type.var.mp"
					},
					"3": {
						"name": "punctuation.definition.variable.mp"
					}
				}
			}]
		},
		"variable-perl": {
			"patterns": [{
				"match": "(\\$\\w+)",
				"captures": {
					"1": {
						"name": "storage.type.var.mp"
					}
				}
			}]
		},
		"variable-bareword": {
			"patterns": [{
				"match": "(\\w+)",
				"captures": {
					"1": {
						"name": "storage.type.var.mp"
					}
				}
			}]
		},
		"string": {
			"patterns": [
				{"include": "#string-perl-qq"},
				{"include": "#string-single-quoted"},
				{"include": "#string-double-quoted"}
			]
		},
		"string-single-quoted": {
			"patterns": [{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.mp",
					"patterns": [
						{"include": "#escape-characters"},
						{"include": "#sql-injection-single"}
					]
			}]
		},
		"sql-injection-single": {
			"begin": "(^\\s*|(?<=')\\s*)(?=(?i:(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND|LIMIT|ORDER BY)))",
			"end": "(?=\\')",
			"patterns": [
				{	
					"comment": "without this, source.sql breaks everything thinking a new string is started",
					"match": "\""
				},
				{"include": "#escape-characters"},
				{"include": "source.sql"}
			]
		},
		"string-double-quoted": {
			"patterns": [{
				"begin": "\"",
				"end": "\"",
				"name": "string.quoted.double.mp",
				"patterns": [
					{"include": "#escape-characters"},
					{"include": "#sql-injection-double"},
					{"include": "#variable-enclosed"}
				]
			}]
		},
		"sql-injection-double": {
			"begin": "(^\\s*|(?<=\")\\s*)(?=(?i:(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND|LIMIT|ORDER BY)))",
			"end": "(?=\")",
			"patterns": [
				{	
					"comment": "without this, source.sql breaks everything thinking a new string is started",
					"match": "'"
				},
				{"include": "#variable-enclosed"},
				{"include": "#escape-characters"},
				{"include": "source.sql"}
			]
		},
		"string-perl-qq": {
			"begin": "qq([^\\(\\{\\[\\<\\w])",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.definition.string.begin.mp"
			  }
			},
			"end": "\\1",
			"endCaptures": {
			  "0": {
				"name": "punctuation.definition.string.end.mp"
			  }
			},
			"name": "string.quoted.other.qq.mp",
			"patterns": [
				{"include": "#sql-injection-qq"},
				{"include": "#variable-enclosed"},
				{"include": "#escape-characters"}
			]
		},
		"sql-injection-qq": {
			"begin": "(?<=qq([^\\(\\{\\[\\<\\w])\\G)\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND|LIMIT|ORDER BY))",
			"end": "(?=\\1)",
			"patterns": [
				{	
					"comment": "without this, source.sql breaks everything thinking a new string is started",
					"match": "(\"|')"
				},
				{"include": "#variable-enclosed"},
				{"include": "#escape-characters"},
				{"include": "source.sql"}
			]
		},
		"sql-string-perl-qq": {
			"begin": "qq([^\\(\\{\\[\\<\\w])",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.definition.string.begin.mp"
			  }
			},
			"end": "\\1",
			"endCaptures": {
			  "0": {
				"name": "punctuation.definition.string.end.mp"
			  }
			},
			"name": "string.quoted.other.qq.mp",
			"patterns": [
				{"include": "#variable-enclosed"},
				{"include": "#escape-characters"},
				{"include": "source.sql"}
			]
		},
		"mp-conditional-block": {
			"begin": "(<[^<]*)?\\[(?=[^\\|]*\\|)",
			"beginCaptures": {
				"1": {
					"patterns": [
						{"include": "text.html.basic"}
					]
				}
			},
			"end": "\\]([^>]*>)?",
			"endCaptures": {
				"1": {
					"patterns": [
						{"include": "text.html.basic"}
					]
				}
			},
			"patterns": [
				{"include": "#mp-conditional-block-logic"},
				{"include": "#mp-conditional-block-output"}
			]
		},
		"mp-conditional-block-logic": {
			"begin": "(?<=\\[)",
			"end": "\\|+?",
			"patterns": [
				{"include": "#mp-conditional-logical-operator-word"},
				{"include": "#mod-perl"},
				{"include": "#mp-conditional-logical-operator-symbol"}
			]
		},
		"mp-conditional-logical-operator-word": {
			"match": "(?i)\\b(and|or|ne|eq)\\b",
			"name": "keyword.operator.mp"
		},
		"mp-conditional-logical-operator-symbol": {
			"match": "(&&|!|==|!=|%|/|\\*|-|\\+)",
			"name": "keyword.operator.mp"
		},
		"mp-conditional-block-output": {
			"begin": "(?<=\\|)",
			"end": "((?=\\])|\\|)",
			"patterns":[
				{"include":"#variable-enclosed"},
				{"include":"text.html.basic"}
			]
		},
		"mp-template-output": {
			"begin": "\\~",
			"end": "\\~",
			"patterns": [
				{"include": "#mod-perl"}
			]
		},
		"regex": {
			"patterns": [
				{
					"match": "[a-zA-Z]?/.*/?.*?/[a-zA-Z]?",
					"name": "string.regexp"
				}
			]
		},
		"mp-control": {
			"patterns": [{
				"match": "(MPIF|MPELSEIF|MPELSE|MPLOOP|MPVAR|MPBLOCK|MPFUNCTION|MPLIB|MPINIT|MPBREAK|\\$INCLUDE|MPENDIF|MPENDLOOP|MPENDVAR|MPENDBLOCK)",
				"name": "keyword.control.mp"				
			}]
		},
		"mp-control-open": {
			"patterns": [{
				"match": "(MPIF|MPELSEIF|MPELSE|MPLOOP|MPVAR|MPBLOCK)",
				"name": "keyword.control.mp"
			}]
		},
		"mp-control-end": {
			"patterns": [{
				"match": "(MPENDIF|MPENDLOOP|MPENDVAR|MPENDBLOCK)",
				"name": "keyword.control.mp"
			}]
		},
		"mp-operators": {
			"comment": "TODO: get all operators matched here, - + && || % etc"
		},
		"mp-accessors": {
			"comment": "TODO: capture -> for variables, maybe ${} and @{} syntax as well"
		},
		"escape-characters": {
			"patterns": [
				{
					"comment": "This captures a lot of escape characters. Copied from js syntax",
					"name": "constant.character.escape.mp",
					"match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
				}
			]
		}
	}
}
