{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.mp",
	"name": "MP",
	"patterns": [
		{
			"include": "#comment"
		},
		{
            "name": "constant.character.escape.mp",
            "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
        },
		{
			"begin": "(<!--)",
			"beginCaptures": {
				"0": {
					"name": "comment.block.html"
				}
			},
			"end": "(-->)",
			"endCaptures": {
				"0": {
					"name": "comment.block.html"
				}
			},
			"patterns": [
				{
					"include": "#regex"
				},
				{
					"include": "#string"
				},
				{
					"match": "(MPIF|MPELSEIF|MPELSE|MPLOOP|MPVAR|MPBLOCK|MPFUNCTION|MPLIB|MPINIT|MPBREAK|\\$INCLUDE)",
					"name": "keyword.control.mp"
				},
				{
					"match": "(MPENDIF|MPENDLOOP|MPENDVAR|MPENDBLOCK)",
					"name": "keyword.control.mp"
				},
				{
					"include": "#function"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#variable"
				},
				{
					"name": "punctuation.accessor.mp",
					"match": "->"
				}
			]
		},
		{
			"include": "text.html.basic"
		}
	],
	"repository": {
		"comment": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.mp"
				}
			]
		},
		"function": {
			"patterns": [
				{
					"match": "(\\w+)\\(",
					"captures": {
						"1": {
							"name": "entity.name.function.mp"
						}
					}
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"match": "(\\-?\\d+\\.?\\d*)",
					"captures": {
						"1": {
							"name": "constant.numeric.mp"
						}
					}
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"include": "#variable-enclosed"
				},
				{
					"include": "#variable-perl"
				},
				{
					"include": "#variable-bareword"
				}
			]
		},
		"string": {
			"patterns": [
				{"include": "#sql-string-single-quoted"},
				{"include": "#sql-string-double-quoted"},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.mp"
				},
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.mp",
					"patterns": [
						{"include": "#variable-enclosed"}
					]
				}
			]
		},
		"sql-string-double-quoted": {
            "begin": "\"\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND|LIMIT|ORDER BY)\\b)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.mp"
                }
            },
            "contentName": "source.sql.embedded.mp",
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.mp"
                }
            },
            "name": "string.quoted.double.sql.mp",
            "patterns": [
				{"include": "#variable-enclosed"},
				{"include": "source.sql"}
            ]
        },
        "sql-string-single-quoted": {
            "begin": "'\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND|LIMIT|ORDER BY)\\b)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.mp"
                }
            },
            "contentName": "source.sql.embedded.mp",
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.mp"
                }
            },
            "name": "string.quoted.single.sql.mp",
            "patterns": [
                {
                    "include": "source.sql"
                }
            ]
        },
		"regex": {
			"patterns": [
				{
					"match": "[a-zA-Z]?/.*/?.*?/[a-zA-Z]?",
					"name": "string.regexp"
				}
			]
		},
		"escape-characters": {
			"patterns": [
				{
					"comment": "This captures a lot of escape characters. Copied from js syntax",
					"name": "constant.character.escape.mp",
					"match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
				}
			]
		},
		"variable-bareword": {
			"patterns": [{
				"match": "(\\w+)",
				"captures": {
					"1": {
						"name": "storage.type.var.mp"
					}
				}
			}]
		},
		"variable-perl": {
			"patterns": [{
				"match": "(\\$\\w+)",
				"captures": {
					"1": {
						"name": "storage.type.var.mp"
					}
				}
			}]
		},
		"variable-enclosed": {
			"patterns": [{
				"match": "(\\$\\{)(\\w+)(\\})",
				"captures": {
					"1": {
						"name": "punctuation.definition.variable.mp"
					},
					"2": {
						"name": "storage.type.var.mp"
					},
					"3": {
						"name": "punctuation.definition.variable.mp"
					}
				}
			}]
		}
	}
}